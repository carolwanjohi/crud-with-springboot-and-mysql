{
	"info": {
		"_postman_id": "43e27646-ec63-419d-8475-6281e4537c0b",
		"name": "CRUD",
		"description": "# ðŸš€ Get started here\n\nThis is a Postman Collection for [CRUD with Springboot and MySQL](https://github.com/carolwanjohi/crud-with-springboot-and-mysql)\n\n## ðŸ”– What is available\n\n#### **1: Requests**\n\nRESTful APIs to perform CRUD operations for the Springboot Application.\n\n#### **1.1: Test**\n\nThere are tests for each operation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33260710"
	},
	"item": [
		{
			"name": "Create a user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"{{$randomFullName}}\",\n    \"address\":\"{{$randomStreetAddress}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				},
				"description": "This is creates a user.\n\nResponse will have a `200 OK` status and a response body."
			},
			"response": []
		},
		{
			"name": "Get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				},
				"description": "This returns a list of users.\n\nResponse will have a `200 OK` status and a response body."
			},
			"response": []
		},
		{
			"name": "Get a user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				},
				"description": "This is a specific user.\n\nResponse will have a `200 OK` status and a response body."
			},
			"response": []
		},
		{
			"name": "Update a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"{{$randomFullName}}\",\n    \"address\":\"{{$randomStreetAddress}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				},
				"description": "This is modifies an existing user. The entity is identified using the `id`.\n\nResponse will have a `200 OK` status and a response body."
			},
			"response": []
		},
		{
			"name": "Delete a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				},
				"description": "This is deletes an existing user. The entity is identified using the `id`.\n\nResponse will have a `200 OK` status and a response body."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080/api/entities"
		}
	]
}